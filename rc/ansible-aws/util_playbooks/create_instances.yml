# vim: set ft=ansible:
---
- name: Launch the instance
  hosts: localhost
  gather_facts: no
  connection: local
  sudo: no
  vars_files:
  - ../vars.yml
  vars:
    cluster_id: "{{ lookup('env', 'CLUSTER_ID')
                    | default(os_defaults.cluster_id, true) }}"
    ec2_region: "{{ lookup('env', 'EC2_REGION')
                    | default(provider_defaults.ec2.region, true) }}"
    ec2_image: "{{ lookup('env', 'EC2_AMI_ID')
                   | default(provider_defaults.ec2.image, true) }}"
    ec2_keypair: "{{ lookup('env', 'EC2_KEYPAIR')
                     | default(provider_defaults.ec2.keypair, true) }}"
    host_groups: "{{ lookup('env', 'HOST_GROUPS')
                     | default(provider_defaults.ec2.groups, true) }}"
    host_tags: "{{ lookup('env', 'HOST_TAGS')
                     | default(provider_defaults.ec2.tags, true) }}"
    master_groups: "{{ lookup('env', 'MASTER_GROUPS')
                       | default(provider_defaults.ec2.master.groups, true) }}"
    master_tags: "{{ lookup('env', 'MASTER_TAGS')
                     | default(provider_defaults.ec2.master.tags, true) }}"
    master_is_node: "{{ lookup('env', 'MASTER_IS_NODE')
                        | default(os_defaults.master_is_node, true) }}"
    master_root_vol_size: "{{ lookup('env', 'MASTER_ROOT_VOL_SIZE')
                              | default(os_defaults.master_root_vol_size, true) }}"
    master_security_groups: "{{ lookup('env', 'MASTER_SECURITY_GROUPS')
                                | default(provider_defaults.ec2.master.security_groups, true) }}"
    node_docker_vol_size: "{{ lookup('env', 'NODE_DOCKER_VOL_SIZE')
                              | default(os_defaults.node_docker_vol_size, true) }}"
    node_root_vol_size: "{{ lookup('env', 'NODE_ROOT_VOL_SIZE')
                            | default(os_defaults.node_root_vol_size, true) }}"
    node_groups: "{{ lookup('env', 'NODE_GROUPS')
                     | default(provider_defaults.ec2.node.groups, true) }}"
    node_tags: "{{ lookup('env', 'NODE_TAGS')
                   | default(provider_defaults.ec2.node.tags, true) }}"
    node_security_groups: "{{ lookup('env', 'NODE_SECURITY_GROUPS')
                              | default(provider_defaults.ec2.node.security_groups, true) }}"
    num_masters: "{{ lookup('env', 'NUM_MASTERS')
                     | default(os_defaults.num_masters, true) }}"
    num_nodes: "{{ lookup('env', 'NUM_NODES')
                   | default(os_defaults.num_nodes, true) }}"
    r53_host_zone: "{{ lookup('env', 'ROUTE_53_HOST_ZONE') }}"
    r53_wildcard_zone: "{{ lookup('env', 'ROUTE_53_WILDCARD_ZONE') }}"
  tasks:
  - set_fact:
      instance_count: "{% if role == 'master' %}{{ num_masters }}{% elif master_is_node %}{{ num_nodes | int + 1 }}{% else %}{{ num_nodes }}{% endif %}"
      security_groups: "{% if role == 'node' %}{{ node_security_groups }}{% elif master_is_node %}{{ master_security_groups | union(node_security_groups) | unique }}{% else %}{{ master_security_groups }}{% endif %}"
      instance_groups: "{% if role == 'node' %}{{ host_groups | union(node_groups) | unique }}{% elif master_is_node %}{{ host_groups | union(master_groups) | union(node_groups) | unique }}{% else %}{{  host_groups | union(master_groups) | unique }}{% endif %}"
      instance_tags: "{{ host_tags | oo_dict_merge(master_tags) | oo_dict_merge(node_tags) }}"
      instance_tags: "{% if role == 'node' %}{{ host_tags | oo_dict_merge(node_tags) }}{% elif master_is_node %}{{ host_tags | oo_dict_merge(master_tags) | oo_dict_merge(node_tags) }}{% else %}{{  host_tags | oo_dict_merge(master_tags) }}{% endif %}"
      root_volume:
        volume_size: "{{ master_root_vol_size if role == 'master' else node_root_vol_size }}"
        device_type: gp2
        device_name: /dev/sda1
        delete_on_termination: True
      docker_volume:
        volume_size: "{{ node_docker_vol_size }}"
        device_type: gp2
        device_name: /dev/xvdb
        delete_on_termination: True
  - set_fact:
      volumes: "{{ [root_volume, docker_volume] if (role == 'node' or (role == 'master' and master_is_node)) else [root_volume] }}"

  - name: Create ec2 instance
    ec2:
      image: "{{ ec2_image }}"
      region: "{{ ec2_region }}"
      key_name: "{{ ec2_keypair }}"
      instance_type: m3.large
      group: "{{ security_groups }}"
      user_data: "{{ lookup('template', 'user_data.j2') }}"
      exact_count: "{{ instance_count }}"
      wait: yes
      count_tag: "{{ instance_tags }}"
      instance_tags: "{{ instance_tags }}"
      volumes: "{{ volumes }}"
    register: ec2

  - name: Add name tag to instances
    ec2_tag: resource={{ item.id }} region={{ ec2_region }} state=present
    args:
      tags:
        Name: "openshift-{{ role }}{{ ('-' ~ item.id.split('-').1) if role != 'master' else '' }}"
    when: item.state == "running"
    with_items: ec2.instances

  - name: Create wildcard dns entry if master
    route53:
      command: create
      zone: "{{ r53_wildcard_zone }}"
      record: "*.{{ r53_wildcard_zone }}"
      ttl: 300
      type: A
      value: "{{ item.public_ip }}"
      overwrite: yes
    when: r53_wildcard_zone and role == 'master' and item.state == 'running'
    with_items: ec2.instances

  - name: Create host dns entry
    route53:
      command: create
      zone: "{{ r53_host_zone }}"
      record: "openshift-{{ role }}{{ ('-' ~ item.id.split('-').1) if role != 'master' else '' }}.{{ r53_host_zone }}"
      ttl: 300
      type: A
      value: "{{ item.public_ip }}"
      overwrite: yes
    when: r53_host_zone and item.state == 'running'
    with_items: ec2.instances

  - name: Add new instance groups and variables
    add_host:
      hostname: "openshift-{{ role }}{{ ('-' ~ item.id.split('-').1) if role != 'master' else '' }}"
      openshift_public_hostname: "{% if r53_host_zone %}openshift-{{ role }}{{ ('-' ~ item.id.split('-').1) if role != 'master' else '' }}.{{ r53_host_zone }}{% else %}{{ omit }}{% endif %}"
      ansible_ssh_host: "{{ item.dns_name }}"
      ansible_ssh_user: openshift
      groups: "{{ instance_groups | join(', ') }}"
      ec2_private_ip_address: "{{ item.private_ip }}"
      ec2_ip_address: "{{ item.public_ip }}"
    when: item.state == "running"
    with_items: ec2.instances

  - name: Wait for ssh
    wait_for: "port=22 host={{ item.dns_name }}"
    when: item.state == "running"
    with_items: ec2.instances

  - name: Wait for user setup
    command: "ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null openshift@{{ item.dns_name }} echo openshift user is setup"
    register: result
    until: result.rc == 0
    retries: 20
    delay: 10
    when: item.state == "running"
    with_items: ec2.instances
